
$ git add AUV.map

$ git commit

//-----------------------------------------------------------------------------------------
$ git clone D:/Larionov/Projects/Keil_v5.30/AUVlast AUV
Клонирование репозитория находящегося в D:/Larionov/Projects/Keil_v5.30/AUVlast
в каталог D:/Larionov/Projects/Keil_v5.30/AUVlast/AUV. Новый каталог AUV Git создаст сам.


$ git clone https://github.com/LarRedOrm/D6T D:/Larionov/test
Клонирование репозитория находящегося в https://github.com/LarRedOrm/D6T
в каталог D:/Larionov/test. Новый каталог test Git создаст сам.
//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
$ gitk

Открыть Gitk - a commit viewer for git.
//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
$ git ls-tree master

//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
$ git rm

Для того чтобы удалить файл из Git, вам необходимо удалить его из отслеживаемых файлов
(точнее, удалить его из вашего индекса) а затем выполнить коммит. Это позволяет сделать
команда git rm, которая также удаляет файл из вашего рабочего каталога, так что в
следующий раз вы не увидите его как «неотслеживаемый»
//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
$ git rm --cached AUV.map

Удаление файла из индекса, оставив его при этом в рабочем каталоге.
Другими словами, вы можете захотеть оставить файл на жёстком диске,
но перестать отслеживать изменения в нём.
//-----------------------------------------------------------------------------------------



$ git status



//-----------------------------------------------------------------------------------------
$ git remote remove origin
Удалить ссылку на удалённый реп.
//-----------------------------------------------------------------------------------------



//-----------------------------------------------------------------------------------------
$ git remote -v
Проверить ссылку на удалённый репозиторий
//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
После того как создан удаленный репозиторий, нужно связать локальный репозиторий с удалённым.

С рабочим репозиторием:
$ git remote add origin git@192.168.5.169:Larionov/AUV.git - так работает :-)
$ git remote add origin git@gitea:Larionov/AUV.git         - так должно работать, но не работает :-(


С репозиторием на GitHub:
$ git remote add origin https://github.com/LarRedOrm/test.git - связать локальный репозиторий с удалённым на GitHub.
$ git branch -M master                                        - создание ветки master.
$ git push -u origin master                                   - отправить комитты на удалённый репозиторий.
$ git push -u origin master --tags                            - отправить комитты на удалённый репозиторий вместе с тегами.
//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
$ git push master origin
Отправить комитты на удалённый репозиторий по методу DimaO. Не заработало.
//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
$ git add -u
Добавить в следующий коммит только те файлы, в которых есть изменения
//-----------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------
echo "Тут должен быть комментарий" > README.md создать файл README.md  в ОС Windows
echo '' > .gitignore                           создать файл .gitignore в ОС Windows

//-----------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------------------------------
Команды для настройки текстового редактора в Git.

git config --system --unset-all core.editor - удалить настройку выбранного текстового редактора в настройках system
git config --global --unset-all core.editor - удалить настройку выбранного текстового редактора в настройках global
git config --local --unset-all core.editor  - удалить настройку выбранного текстового редактора в настройках loсal

Выбор в качестве текстового редактора Notepad++.
В случае с  Notepad++,  популярным редактором,
скорее всего вы захотите установить  32-битную версию, так как 64-битная версия ещё не поддерживает все плагины.
Если у вас 32-битная Windows или 64-битный редактор с 64-битной системой, то выполните следующее:

git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"


Выбор в качестве текстового редактора Notepad (Windows 64-bit).
git config core.editor notepad
//------------------------------------------------------------------------------------------------------------------







